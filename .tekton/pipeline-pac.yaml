
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  labels:
    "app.kubernetes.io/instance": "pac1361"
    "app.openshift.io/runtime": "nodejs"
    "boson.dev/function": "true"
    "boson.dev/runtime": "node"
    "function.knative.dev": "true"
    "function.knative.dev/name": "pac1361"
    "function.knative.dev/runtime": "node"
    
  annotations:
    
  name: pac1361-s2i-git-pipeline
spec:
  params:
    - default: ''
      description: Git repository that hosts the function project
      name: gitRepository
      type: string
    - description: Git revision to build
      name: gitRevision
      type: string
    - default: ''
      description: Path where the function project is
      name: contextDir
      type: string
    - description: Function image name
      name: imageName
      type: string
    - description: The registry associated with the function image
      name: registry
      type: string
    - description: Builder image to be used
      name: builderImage
      type: string
    - description: Environment variables to set during build time
      name: buildEnvs
      type: array
    - description: URL containing the default assemble and run scripts for the builder image
      name: s2iImageScriptsUrl
      type: string
      default: 'image:///usr/libexec/s2i'
  tasks:
    - name: fetch-sources
      params:
        - name: url
          value: $(params.gitRepository)
        - name: revision
          value: $(params.gitRevision)
      workspaces:
        - name: output
          workspace: source-workspace
        - name: cache
          workspace: cache-workspace
        - name: dockerconfig
          workspace: dockerconfig-workspace
      taskSpec:
        description: |-
          These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
          The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
        params:
          - description: Repository URL to clone from.
            name: url
            type: string
          - default: ""
            description: Revision to checkout. (branch, tag, sha, ref, etc...)
            name: revision
            type: string
          - default: ""
            description: Refspec to fetch before checking out revision.
            name: refspec
          - default: "true"
            description: Initialize and fetch git submodules.
            name: submodules
            type: string
          - default: "1"
            description: Perform a shallow clone, fetching only the most recent N commits.
            name: depth
            type: string
          - default: "true"
            description: Set the http.sslVerify global git config. Setting this to false is not advised unless you are sure that you trust your git remote.
            name: sslVerify
            type: string
          - default: ca-bundle.crt
            description: file name of mounted crt using ssl-ca-directory workspace. default value is ca-bundle.crt.
            name: crtFileName
            type: string
          - default: ""
            description: Subdirectory inside the output Workspace to clone the repo into.
            name: subdirectory
            type: string
          - default: ""
            description: Define the directory patterns to match or exclude when performing a sparse checkout.
            name: sparseCheckoutDirectories
            type: string
          - default: "true"
            description: Clean out the contents of the destination directory if it already exists before cloning.
            name: deleteExisting
            type: string
          - default: ""
            description: HTTP proxy server for non-SSL requests.
            name: httpProxy
            type: string
          - default: ""
            description: HTTPS proxy server for SSL requests.
            name: httpsProxy
            type: string
          - default: ""
            description: Opt out of proxying HTTP/HTTPS requests.
            name: noProxy
            type: string
          - default: "true"
            description: Log the commands that are executed during git-clone's operation.
            name: verbose
            type: string
          - default: ghcr.io/tektoncd-catalog/git-clone:v1.1.0
            description: The image providing the git-init binary that this Task runs.
            name: gitInitImage
            type: string
          - default: /home/git
            description: |
              Absolute path to the user's home directory.
            name: userHome
            type: string
        results:
          - description: The precise commit SHA that was fetched by this Task.
            name: commit
          - description: The precise URL that was fetched by this Task.
            name: url
          - description: The epoch timestamp of the commit that was fetched by this Task.
            name: committer-date
        steps:
          - env:
              - name: HOME
                value: $(params.userHome)
              - name: PARAM_URL
                value: $(params.url)
              - name: PARAM_REVISION
                value: $(params.revision)
              - name: PARAM_REFSPEC
                value: $(params.refspec)
              - name: PARAM_SUBMODULES
                value: $(params.submodules)
              - name: PARAM_DEPTH
                value: $(params.depth)
              - name: PARAM_SSL_VERIFY
                value: $(params.sslVerify)
              - name: PARAM_CRT_FILENAME
                value: $(params.crtFileName)
              - name: PARAM_SUBDIRECTORY
                value: $(params.subdirectory)
              - name: PARAM_DELETE_EXISTING
                value: $(params.deleteExisting)
              - name: PARAM_HTTP_PROXY
                value: $(params.httpProxy)
              - name: PARAM_HTTPS_PROXY
                value: $(params.httpsProxy)
              - name: PARAM_NO_PROXY
                value: $(params.noProxy)
              - name: PARAM_VERBOSE
                value: $(params.verbose)
              - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
                value: $(params.sparseCheckoutDirectories)
              - name: PARAM_USER_HOME
                value: $(params.userHome)
              - name: WORKSPACE_OUTPUT_PATH
                value: $(workspaces.output.path)
              - name: WORKSPACE_SSH_DIRECTORY_BOUND
                value: $(workspaces.ssh-directory.bound)
              - name: WORKSPACE_SSH_DIRECTORY_PATH
                value: $(workspaces.ssh-directory.path)
              - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
                value: $(workspaces.basic-auth.bound)
              - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
                value: $(workspaces.basic-auth.path)
              - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
                value: $(workspaces.ssl-ca-directory.bound)
              - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
                value: $(workspaces.ssl-ca-directory.path)
            image: $(params.gitInitImage)
            name: clone
            script: |
              #!/usr/bin/env sh
              set -eu
      
              if [ "${PARAM_VERBOSE}" = "true" ] ; then
                set -x
              fi
      
              if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                chmod 400 "${PARAM_USER_HOME}/.gitconfig"
              fi
      
              if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                chmod 700 "${PARAM_USER_HOME}"/.ssh
                chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
              fi
      
              if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
                 export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
                 if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
                    export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
                 fi
              fi
              CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"
      
              cleandir() {
                # Delete any existing contents of the repo directory if it exists.
                #
                # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                # or the root of a mounted volume.
                if [ -d "${CHECKOUT_DIR}" ] ; then
                  # Delete non-hidden files and directories
                  rm -rf "${CHECKOUT_DIR:?}"/*
                  # Delete files and directories starting with . but excluding ..
                  rm -rf "${CHECKOUT_DIR}"/.[!.]*
                  # Delete files and directories starting with .. plus any other character
                  rm -rf "${CHECKOUT_DIR}"/..?*
                fi
              }
      
              if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                cleandir || true
              fi
      
              test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
              test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
              test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"
      
              git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"
              /ko-app/git-init \
                -url="${PARAM_URL}" \
                -revision="${PARAM_REVISION}" \
                -refspec="${PARAM_REFSPEC}" \
                -path="${CHECKOUT_DIR}" \
                -sslVerify="${PARAM_SSL_VERIFY}" \
                -submodules="${PARAM_SUBMODULES}" \
                -depth="${PARAM_DEPTH}" \
                -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
              cd "${CHECKOUT_DIR}"
              RESULT_SHA="$(git rev-parse HEAD)"
              EXIT_CODE="$?"
              if [ "${EXIT_CODE}" != 0 ] ; then
                exit "${EXIT_CODE}"
              fi
              RESULT_COMMITTER_DATE="$(git log -1 --pretty=%ct)"
              printf "%s" "${RESULT_COMMITTER_DATE}" > "$(results.committer-date.path)"
              printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
              printf "%s" "${PARAM_URL}" > "$(results.url.path)"
            securityContext:
              runAsNonRoot: true
              runAsUser: 65532
            volumeMounts:
              - mountPath: $(params.userHome)
                name: user-home
        volumes:
          - emptyDir: {}
            name: user-home
        workspaces:
          - description: The git repo will be cloned onto the volume backing this Workspace.
            name: output
          - name: cache
            optional: true
          - name: sslcertdir
            optional: true
          - name: dockerconfig
            optional: true
          - description: |
              A .ssh directory with private key, known_hosts, config, etc. Copied to
              the user's home before git commands are executed. Used to authenticate
              with the git remote when performing the clone. Binding a Secret to this
              Workspace is strongly recommended over other volume types.
            name: ssh-directory
            optional: true
          - description: |
              A Workspace containing a .gitconfig and .git-credentials file. These
              will be copied to the user's home before any git commands are run. Any
              other files in this Workspace are ignored. It is strongly recommended
              to use ssh-directory over basic-auth whenever possible and to bind a
              Secret to this Workspace over other volume types.
            name: basic-auth
            optional: true
          - description: |
              A workspace containing CA certificates, this will be used by Git to
              verify the peer with when fetching or pushing over HTTPS.
            name: ssl-ca-directory
            optional: true
      
    - name: scaffold
      params:
        - name: path
          value: $(workspaces.source.path)/$(params.contextDir)
      workspaces:
        - name: source
          workspace: source-workspace
        - name: cache
          workspace: cache-workspace
        - name: dockerconfig
          workspace: dockerconfig-workspace
      runAfter:
        - fetch-sources
      taskSpec:
        params:
          - default: ""
            description: Path to the function project
            name: path
        steps:
          - image: ghcr.io/knative/func-utils:latest
            name: func-scaffold
            script: |
              scaffold $(params.path)
        workspaces:
          - description: The workspace containing the function project
            name: source
          - name: cache
            optional: true
          - name: sslcertdir
            optional: true
          - name: dockerconfig
            optional: true
      
    - name: build
      params:
        - name: IMAGE
          value: $(params.imageName)
        - name: REGISTRY
          value: $(params.registry)
        - name: PATH_CONTEXT
          value: $(params.contextDir)
        - name: BUILDER_IMAGE
          value: $(params.builderImage)
        - name: ENV_VARS
          value:
            - '$(params.buildEnvs[*])'
        - name: S2I_IMAGE_SCRIPTS_URL
          value: $(params.s2iImageScriptsUrl)
      runAfter:
        - scaffold
      taskSpec:
        description: |-
          Knative Functions Source-to-Image (S2I) is a toolkit and workflow for building reproducible container images from source code
          S2I produces images by injecting source code into a base S2I container image and letting the container prepare that source code for execution. The base S2I container images contains the language runtime and build tools needed for building and running the source code.
        params:
          - description: The location of the s2i builder image.
            name: BUILDER_IMAGE
          - description: Reference of the image S2I will produce.
            name: IMAGE
          - default: ""
            description: The registry associated with the function image.
            name: REGISTRY
          - default: .
            description: The location of the path to run s2i from.
            name: PATH_CONTEXT
          - default: "true"
            description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
            name: TLSVERIFY
          - default: "0"
            description: Log level when running the S2I binary
            name: LOGLEVEL
          - default: []
            description: Environment variables to set during _build-time_.
            name: ENV_VARS
            type: array
          - default: image:///usr/libexec/s2i
            description: The URL containing the default assemble and run scripts for the builder image.
            name: S2I_IMAGE_SCRIPTS_URL
        results:
          - description: Digest of the image just built.
            name: IMAGE_DIGEST
        steps:
          - args:
              - $(params.ENV_VARS[*])
            image: ghcr.io/knative/func-utils:latest
            name: generate
            script: |
              echo "Processing Build Environment Variables"
              echo "" > /env-vars/env-file
              for var in "$@"
              do
                  if [[ "$var" != "=" ]]; then
                      echo "$var" >> /env-vars/env-file
                  fi
              done
      
              echo "Generated Build Env Var file"
              echo "------------------------------"
              cat /env-vars/env-file
              echo "------------------------------"
      
              /usr/local/bin/s2i --loglevel=$(params.LOGLEVEL) build --keep-symlinks $(params.PATH_CONTEXT) $(params.BUILDER_IMAGE) \
              --image-scripts-url $(params.S2I_IMAGE_SCRIPTS_URL) \
              --as-dockerfile /gen-source/Dockerfile.gen --environment-file /env-vars/env-file
      
              echo "Preparing func.yaml for later deployment"
              func_file="$(workspaces.source.path)/func.yaml"
              if [ "$(params.PATH_CONTEXT)" != "" ]; then
                func_file="$(workspaces.source.path)/$(params.PATH_CONTEXT)/func.yaml"
              fi
              sed -i "s|^registry:.*$|registry: $(params.REGISTRY)|" "$func_file"
              echo "Function image registry: $(params.REGISTRY)"
      
              s2iignore_file="$(dirname "$func_file")/.s2iignore"
              [ -f "$s2iignore_file" ] || echo "node_modules" >> "$s2iignore_file"
            volumeMounts:
              - mountPath: /gen-source
                name: gen-source
              - mountPath: /env-vars
                name: env-vars
            workingDir: $(workspaces.source.path)
          - image: registry.redhat.io/rhel8/buildah@sha256:a1e5cc0fb334e333e5eab69689223e8bd1f0c060810d260603b26cf8c0da2023
            name: build
            script: |
              TLS_VERIFY_FLAG=""
              if [ "$(params.TLSVERIFY)" = "false" ] || [ "$(params.TLSVERIFY)" = "0" ]; then
                TLS_VERIFY_FLAG="--tls-verify=false"
              fi
      
              [[ "$(workspaces.sslcertdir.bound)" == "true" ]] && CERT_DIR_FLAG="--cert-dir $(workspaces.sslcertdir.path)"
              ARTIFACTS_CACHE_PATH="$(workspaces.cache.path)/mvn-artifacts"
              [ -d "${ARTIFACTS_CACHE_PATH}" ] || mkdir "${ARTIFACTS_CACHE_PATH}"
              buildah ${CERT_DIR_FLAG} bud --storage-driver=vfs ${TLS_VERIFY_FLAG} --layers \
                -v "${ARTIFACTS_CACHE_PATH}:/tmp/artifacts/:rw,z,U" \
                -f /gen-source/Dockerfile.gen -t $(params.IMAGE) .
      
              [[ "$(workspaces.dockerconfig.bound)" == "true" ]] && export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"
              buildah ${CERT_DIR_FLAG} push --storage-driver=vfs ${TLS_VERIFY_FLAG} --digestfile $(workspaces.source.path)/image-digest \
                $(params.IMAGE) docker://$(params.IMAGE)
      
              cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
            securityContext:
              capabilities:
                add:
                  - SETFCAP
            volumeMounts:
              - mountPath: /var/lib/containers
                name: varlibcontainers
              - mountPath: /gen-source
                name: gen-source
            workingDir: /gen-source
        volumes:
          - emptyDir: {}
            name: varlibcontainers
          - emptyDir: {}
            name: gen-source
          - emptyDir: {}
            name: env-vars
        workspaces:
          - name: source
          - description: Directory where cache is stored (e.g. local mvn repo).
            name: cache
            optional: true
          - name: sslcertdir
            optional: true
          - description: An optional workspace that allows providing a .docker/config.json file for Buildah to access the container registry. The file should be placed at the root of the Workspace with name config.json.
            name: dockerconfig
            optional: true
      
      workspaces:
        - name: source
          workspace: source-workspace
        - name: cache
          workspace: cache-workspace
        - name: dockerconfig
          workspace: dockerconfig-workspace
    - name: deploy
      params:
        - name: path
          value: $(workspaces.source.path)/$(params.contextDir)
        - name: image
          value: $(params.imageName)@$(tasks.build.results.IMAGE_DIGEST)
      runAfter:
        - build
      taskSpec:
        description: This Task performs a deploy operation using the Knative "func"" CLI
        params:
          - default: ""
            description: Path to the function project
            name: path
          - default: ""
            description: Container image to be deployed
            name: image
        steps:
          - image: ghcr.io/knative/func-utils:latest
            name: func-deploy
            script: |
              deploy $(params.path) "$(params.image)"
        workspaces:
          - description: The workspace containing the function project
            name: source
          - name: cache
            optional: true
          - name: sslcertdir
            optional: true
          - name: dockerconfig
            optional: true
      
      workspaces:
        - name: source
          workspace: source-workspace
        - name: cache
          workspace: cache-workspace
        - name: dockerconfig
          workspace: dockerconfig-workspace
  workspaces:
    - description: Directory where function source is located.
      name: source-workspace
    - description: Directory where build cache is stored.
      name: cache-workspace
    - description: Directory containing image registry credentials stored in config.json file.
      name: dockerconfig-workspace
      optional: true
